ZLOTO:

zmienna prachowująca: Gracz.gold
wymagana w: 
    1. MapScreen (do wyświetlania ilosci złota zgromadzoengo przez gracza)
        lblGold (wyświetlany na stage02 w MapScreen)        
        status lbl Gold aktualizowany w MapScreen.Show()

ZAMEK:
    Klasa: Castle.java
    Obiekty zamków definiowane są w obiekcie klasy MapScreen.generujPlansze() 
    Sprawdzenie czy któryś gracz nie nadepnął na zamke następuje w:
        Bohater.checkCastle();       
    Zdrowie zamku odnawia się co turę ogólną w metodzie:
        MapScreen.SprawdzCzyKoniecTuryOgolnej.OdnowZdrowieZamkow()

SRZYNIA ZE SKARBEM:
    Klasa: TresureBox.java

    Przykładowa skrzynia ze skarbem dodana w:
    MapScreen.generujPlansze()
    Nadepnięcie na skrzynie zostaje sprawdzone w metodzie
        Bohater.checkTresureBox();

MAPA:
    

BOHATER:
        Sprawdzenie czy bohater może walczyć z zamkiem lub innym bohaterem następuje
    w Bohater.definiujPrzyciski()
        Generowanie bohaterów odbywa się w klasie NewGame wg. ustawień z gracza
    dokonanych w NewGameScreen
        Referencje obiektów utworzonych Bohaterow zapisane zostają w ArrayList
    Gracze.Bohaterowie<>
    Dodanie referencji ww Bohaterow następuje w obiekcie klasy 
    MapScreen.generujGraczy()

DOSWIADCZNIE BOHATERA
        Doświadczenie zwiększa się po zabiciu moba lub bohatera.
    Zwiększenie doświadczenia bohatera następuje:
    1. w metodzie Fight.getObrazenia(...)


KONIEC GRY:
    Sprawdzenie czy nastąpił koniec gry dla Gracza następuje w:
    MapScreen.KoniecTuryClick();
    Kolejno sprawdzane są:
        - Czy gracz posiada zamek
        - jeśli nie - zaczyna się odliczanie 5 tur
        - po 5 turach następuje nadanie graczowi statusu (Gracz.java) GameOver
        - Następuje wyrzucenie wszystkich bohaterów gracza z planszy.
        - Gracz pomijany jest przy kolejnych turach.

SCHMAT RUCHU:
    Zarządzaniem ruchu i ataku bohatera zajmuje się obiekt klasy RUCH.
    DZIAŁANIE:
        1. Po kliknięciu na ikonę bohatera utworzony zostaje nowy obiket klasy
            RUCH.
        2. Obiekt RUCH przeszukuje lokacje wokół bohatera i tworzy odpowiednie
            obikety przycisków wg. zdefiniowanych klas.
            Obiekty przycisków dodane zostają do stage.
        3. Po kliknięciu w przycisk wykonana zostaje odpowiednia procedura
            Ataku/Ruchu, po czym przyciski zostają usunięte.
.

PASEK ENERGII BOHATERA
    Kod odpowiedzialny za aktualizacja paska jest w Bohater.aktualizujTeksture().
    Metoda ta wywoływana jest w Bohater.draw() tylko raz (podczas tworzenia
    bohatera) oraz w Fight.getObrazenia() za każdym razem gdy następuje atak
    bohatera.        
    
GRACZ
    Ikona gracza który ma aktualnie turę: 
    Definicja i pierwsze wywołanie następuje w konstruktorze MapScreen
    Aktualizacja kolory (zmiana aktualnego gracza) następuje w 
    MapScreen.KoniecTury
    Tekstura pobierana jest z Gracz.GetTeksturaIkonaGracza()

ZAMEK
    Tworzenie zamku:
        Tworzenie zamków i dodanie ich do planszy następuje w:
    MapScreen.generujPlansze() poprzez wywołanie metody
    MapScreen.generujZamki().
    W ww metodzie następuje utworzenie obiektu klasy zamek, po czym referencja
    do obiektu dodana zostaje do odpowiedniego obiektu pole w obikecie klasy 
    Mapa. Obiket zamku dodany zostaje także do stage01 w MapScreen.

    Ikona zamku:
        Utworzenie ikony zamku następuje w Konstruktorze klasy Castle(); poprzez
    wywołanie metody Castle.rysujIkoneZamku();
        Zmiana ikony zamku (zamek zmienia właściciela) następuje poprzez 
    wywołanie metody Castle.aktualizujIkoneZamku().
    Metoda ta wywołana zostaje w Bohater.CheckCastle()

NOWY BOHATER
        Dodanie i wygenerowanie nowego bohatera następuje w metodach obiektu
    klasy NewBohaterScreen().
    Metody ww. obiektu korzystają z metod udostepnionych w klasie statycznej
    NewGame().

MOB
        Obiekt moba reprezentuje klasa Mob().
    Tymczasowe obiekty mobów tworzone są w moetodzie MapScreen.generujPlansze()

    ATAK MOBA:
        Po zaatakowaniu moba przez bohatera, zmienna BOOL czyZaatakowany 
        przyjmuje wartość TRUE.
        W metodzie ACT() obiketu klasy Mob() następuje wywołanie (po uprzednim
        spełnieniu warunków) metody ataku Moba na agresora.

MIKSTURA
    Mikstura leczenia zdefiniowana jest jako typ: mikstura
    W obiekcie klasy ItemCreator() podaczas tworzenia nowej mikstury leczenia
    zdefiniowana zostajae ArrayLista z dostępnymi dla itema działaniami.
    Dla mikstury leczenia zostaje dodane nowy obiekt klasy DzialanieItema() do
    ArrayListy.

    W Screenie Bohatera po kliknięciu przycisku załóż przy itemie miktury 
    leczenia w metodzie podmianaItemkow() następuje sprawdzenie czy zadany
    item nie ma typu 'mikstury'.
    Jeżeli warunek okaże się prawdziwy wtedy wywołane zostaną każde kolejne
    dziłania z ArrayListy dla itemka.